name: Release
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release_version'
        required: false
        type: string
jobs:
  validate_input:
    runs-on: ubuntu-22.04
    outputs:
      release_version: ${{ steps.filter.outputs.RELEASE_VERSION }}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4

      -
        name: Get version from input or pyproject.toml
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.release_version }}" ]; then
            INPUT_VERSION="${{ github.event.inputs.release_version }}"
            echo "Get version from input: $INPUT_VERSION"
          else
            INPUT_VERSION=$(grep '^version' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
            echo "Get version from pyproject.toml: $INPUT_VERSION"
          fi
          echo "INPUT_VERSION=$INPUT_VERSION" >> $GITHUB_ENV
          echo "input_version=$INPUT_VERSION" >> $GITHUB_OUTPUT

      - 
        name: Validate input with regex
        id: filter
        run: |
          version="${{ steps.get_version.outputs.input_version }}"
          echo "Release version: $version"

          regex="^v[0-9]+\.[0-9]+\.[0-9]+$"

          if [[ $version =~ $regex ]]; then
            echo "Version matches the regex."
            echo "MAIN_INPUT_VERSION=$version" >> $GITHUB_ENV
            echo "RELEASE_VERSION=$version" >> $GITHUB_OUTPUT
          else
            echo "Version does not match the regex."
            exit 1
          fi

  create_release:
    runs-on: ubuntu-22.04
    needs: validate_input
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4

      - 
        name: Set RELEASE_VERSION
        run: |
          echo "RELEASE_VERSION=${{ needs.validate_input.outputs.release_version }}" >> $GITHUB_ENV

      -
        name: Create release folder
        run: |
          release_folder="AccelTune_${{ env.RELEASE_VERSION }}"
          mkdir -p "$release_folder"
          echo "RELEASE_FOLDER=$release_folder" >> $GITHUB_ENV

      -
        name: Install Python and PyInstaller
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            python:3.10-slim bash -c "\
              apt update && \
              apt install -y gcc build-essential && \
              pip install pyinstaller && \
              pyinstaller --onefile generate_env.py --distpath dist && \
              pyinstaller --onefile pull_all_images.py --distpath dist
            "

      -
        name: Prepare release directory
        run: |
          cp -r nginx src static "${{ env.RELEASE_FOLDER }}"
          cp .env.template LICENSE README.md app.py compose.yaml pyproject.toml version.toml "${{ env.RELEASE_FOLDER }}"

          cp dist/generate_env "${{ env.RELEASE_FOLDER }}/generate_env"
          cp dist/pull_all_images "${{ env.RELEASE_FOLDER }}/pull_all_images"

      -
        name: Upload zipped release
        run: |
          zip -r "AccelTune-release-${{ env.RELEASE_VERSION }}.zip" "${{ env.RELEASE_FOLDER }}"
      -
        name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GIT_ACTION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          files: AccelTune-release-${{ env.RELEASE_VERSION }}.zip