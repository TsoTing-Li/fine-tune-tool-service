name: Release
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release_version'
        required: false
        type: string
jobs:
  get_all_var:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.get_config.outputs.project_name}}
      validated_version: ${{ steps.get_config.outputs.input_version }}
      user_name: ${{ steps.get_config.outputs.user_name}}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4

      -
        name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      -
        name: Get config from pyproject.toml
        id: get_config
        run: |
          PROJECT_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["name"])')
          INPUT_VERSION=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])')
          USER_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["tool"]["docker"]["user_name"])')
          echo "Get version from pyproject.toml: $INPUT_VERSION"
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "input_version=$INPUT_VERSION" >> $GITHUB_OUTPUT
          echo "user_name=$USER_NAME" >> $GITHUB_OUTPUT

      - 
        name: Validate version with regex
        id: filter
        run: |
          version="${{ steps.get_config.outputs.input_version }}"
          echo "Release version: $version"

          regex="^v[0-9]+\.[0-9]+\.[0-9]+$"

          if [[ $version =~ $regex ]]; then
            echo "Version matches the regex."
          else
            echo "Version does not match the regex."
            exit 1
          fi

  create_release:
    runs-on: ubuntu-22.04
    needs: get_all_var
    env:
      PROJECT_NAME: ${{ needs.get_all_var.outputs.project_name}}
      INPUT_VERSION: ${{ needs.get_all_var.outputs.validated_version}}
      USER_NAME: ${{ needs.get_all_var.outputs.user_name}}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4

      -
        name: Generate .env file
        run: |
          set -e
          cat > .env <<EOF
PROJECT_NAME="${{ PROJECT_NAME }}"
VERSION="${{ INPUT_VERSION }}"

# param
USER_NAME="${{ USER_NAME }}"
REPOSITORY="${{ PROJECT_NAME }}"
ROOT_PATH=\${PWD}
HF_HOME=\${HOME}/.cache/huggingface

# main service
MAIN_SERVICE_NAME="main-service"
MAIN_SERVICE_TAG="${{ INPUT_VERSION }}-main_service"
MAIN_SERVICE_CONTAINER_NAME="\${PROJECT_NAME}_main_service"
MAIN_SERVICE_HOST="0.0.0.0"
MAIN_SERVICE_PORT=2089

# redis
REDIS_NAME="redis"
REDIS_TAG="7.2.4"
REDIS_HOST="0.0.0.0"
REDIS_PORT=6379
REDIS_USERNAME="admin"
REDIS_PASSWORD="admin"
REDIS_DB=0
REDIS_CONTAINER_NAME="\${PROJECT_NAME}_redis"
REDIS_LOCAL_DB_PATH="redis"

# fine tune tool
FINE_TUNE_TOOL_NAME="fine-tune-tool"
FINE_TUNE_TOOL_TAG="${{ INPUT_VERSION }}-finetune_tool"

# quantize service
QUANTIZE_SERVICE_NAME="quantize-service"
QUANTIZE_SERVICE_TAG="${{ INPUT_VERSION }}-quantize_service"
QUANTIZE_SERVICE_CONTAINER_NAME="\${PROJECT_NAME}_quantize_service"
QUANTIZE_SERVICE_HOST="0.0.0.0"
QUANTIZE_SERVICE_PORT=8002

# quantize gguf tool
QUANTIZE_GGUF_TOOL_NAME="quantize-gguf"
QUANTIZE_GGUF_TOOL_TAG="${{ INPUT_VERSION }}-quantize_gguf"

# HW info
HWINFO_NAME="hw-info"
HWINFO_TAG="v0.1.0-hw_info"
HWINFO_CONTAINER_NAME="\${PROJECT_NAME}_hw_info"
MOUNT_PATH=""
DEFAULT_VALUE="N/A"
HW_LISTEN_INTERVAL=1

# vllm
VLLM_SERVICE_NAME="vllm"
VLLM_SERVICE_TAG="v0.6.3_P1_cu-12.1.1"
VLLM_SERVICE_HOST="0.0.0.0"
VLLM_SERVICE_PORT=8003

# logger
ACCELTUNE_LOG_FOLDER="/app/logs"
ACCELTUNE_LOG_NAME="acceltune-api.log"
ACCELTUNE_LOG_LIMIT="10485760"
ACCELTUNE_LOG_COUNT="5"
EOF
          echo ".env file generated success"

      -
        name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GIT_ACTION }}
          tag_name: ${{ env.INPUT_VERSION }}
          name: ${{ env.INPUT_VERSION }}
          draft: false
          prerelease: false