name: Build and Push Docker Image
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Docker Image release version'
        required: false
        type: string
jobs:
  get_all_var:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.get_config.outputs.project_name}}
      validated_version: ${{ steps.get_config.outputs.input_version }}
      user_name: ${{ steps.get_config.outputs.user_name}}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4

      -
        name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      -
        name: Get config and repo from pyproject.toml
        id: get_config
        run: |
          PROJECT_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["name"])')
          INPUT_VERSION=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])')
          USER_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["tool"]["docker"]["user_name"])')
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "input_version=$INPUT_VERSION" >> $GITHUB_OUTPUT
          echo "user_name=$USER_NAME" >> $GITHUB_OUTPUT
  
  main_service_docker:
    runs-on: self-hosted
    needs: get_all_var
    env:
      PROJECT_NAME: ${{ needs.get_all_var.outputs.project_name}}
      INPUT_VERSION: ${{ needs.get_all_var.outputs.validated_version}}
      USER_NAME: ${{ needs.get_all_var.outputs.user_name}}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4
      
      -
        name: Login Docker
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      -
        name: Build and push
        run: |
          echo "project_name: ${{ env.PROJECT_NAME }}"
          echo "version: ${{ env.INPUT_VERSION }}"
          echo "user_name: ${{ env.USER_NAME }}"
          docker build -t "${{ env.USER_NAME }}/${{ env.PROJECT_NAME }}:${{ env.INPUT_VERSION }}-main_service" -f docker/main-service .
          docker push "${{ env.USER_NAME }}/${{ env.PROJECT_NAME }}:${{ env.INPUT_VERSION }}-main_service"

  finetune_tool_docker:
    runs-on: self-hosted
    needs: get_all_var
    env:
      PROJECT_NAME: ${{ needs.get_all_var.outputs.project_name}}
      INPUT_VERSION: ${{ needs.get_all_var.outputs.validated_version}}
      USER_NAME: ${{ needs.get_all_var.outputs.user_name}}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4
      
      -
        name: Login Docker
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      -
        name: Build and push
        run: |
          echo "project_name: ${{ env.PROJECT_NAME }}"
          echo "version: ${{ env.INPUT_VERSION }}"
          echo "user_name: ${{ env.USER_NAME }}"
          docker build -t "${{ env.USER_NAME }}/${{ env.PROJECT_NAME }}:${{ env.INPUT_VERSION }}-finetune_tool" -f docker/finetune-tool .
          docker push "${{ env.USER_NAME }}/${{ env.PROJECT_NAME }}:${{ env.INPUT_VERSION }}-finetune_tool"
